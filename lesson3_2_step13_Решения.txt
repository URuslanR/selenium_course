from selenium import webdriver
import time
import unittest

def link_t(link):
    browser = webdriver.Chrome()
    browser.get(link)

    browser.find_element_by_xpath(".//*[@placeholder = 'Введите имя']").send_keys("Иван")
    browser.find_element_by_xpath(".//*[@placeholder = 'Введите фамилию']").send_keys("Иванов")
    browser.find_element_by_xpath(".//*[@placeholder = 'Введите Email']").send_keys("ivan@yandex.ru")
    browser.find_element_by_css_selector("button.btn").click()

    time.sleep(1)
    return browser.find_element_by_tag_name("h1").text


class TestReg(unittest.TestCase):
    def test_reg1(self):
        self.assertEqual(link_t("http://suninjuly.github.io/registration1.html"),
                         "Поздравляем! Вы успешно зарегистировались!", "registration is failed")


    def test_reg2(self):
        self.assertEqual(link_t("http://suninjuly.github.io/registration2.html"),
                         "Поздравляем! Вы успешно зарегистировались!", "registration is failed")

if __name__ == "__main__":
    unittest.main()
	
==============================================================================================================	


import unittest
from selenium import webdriver
from selenium.webdriver.common.by import By


class TestUniqueSelectors(unittest.TestCase):

    def setUp(self):
        self.driver = webdriver.Firefox()

    def fill_form(self, link):
        browser = self.driver
        browser.implicitly_wait(5)
        browser.get(link)

        browser.find_element(By.CSS_SELECTOR, '.first_block .first').send_keys('Kesa')
        browser.find_element(By.CSS_SELECTOR, '.first_block .second').send_keys('Lisa')
        browser.find_element(By.CSS_SELECTOR, '.third_class .third').send_keys('KL@google.com')

        browser.find_element(By.CSS_SELECTOR, "button.btn").click()

        welcome_text = browser.find_element(By.TAG_NAME, 'h1').text
        return welcome_text

    def test_registration(self):
        link = 'http://suninjuly.github.io/registration1.html'
        registration_result = self.fill_form(link)

        self.assertEqual("Congratulations! You have successfully registered!", registration_result)

    def test_registration_bug(self):
        link = 'http://suninjuly.github.io/registration2.html'
        registration_result = self.fill_form(link)

        self.assertEqual("Congratulations! You have successfully registered!", registration_result)

    def tearDown(self):
        self.driver.close()


if __name__ == "__main__":
    unittest.main()
	
===============================================================================================================

import unittest
from selenium import webdriver
import time

welc = "Congratulations! You have successfully registered!"
def registration(link):
    with webdriver.Chrome() as browser:
        browser.get(link)

        input1 = browser.find_element_by_css_selector('.first_block .first')
        input1.send_keys("Iva n")
        input2 = browser.find_element_by_css_selector('.first_block .second')
        input2.send_keys("P etrov")
        input3 = browser.find_element_by_css_selector(".first_block .third")
        input3.send_keys("Pet rov")
        time.sleep(1)

        button = browser.find_element_by_css_selector("button.btn")
        button.click()
        time.sleep(1)
        welcome_text_elt = browser.find_element_by_tag_name("h1")
        return welcome_text_elt.text

class TestsForPages(unittest.TestCase):
    def test_first_page(self):
        p1 = registration("http://suninjuly.github.io/registration1.html")
        self.assertEqual(p1, welc)

    def test_second_page(self):
        p2 = registration("http://suninjuly.github.io/registration2.html")
        self.assertEqual(p2, welc)


if __name__ == "__main__":
    unittest.main()
	
=============================================================================================

import time
import unittest
from selenium import webdriver


class TestForms(unittest.TestCase):
    
    def setUp(self):
        self.browser = webdriver.Chrome()
    
    def tearDown(self):
        self.browser.quit()

    def fill_form(self, url):
        """
        Вспомогательный метод для заполнения форм
        """
        input_fields = ('.first_block .first', '.first_block .second',
                        '.first_block .third')
        values = ('Ivan', 'Ivanov', 'ivan@test.com')
        self.browser.get(url)

        for selector, value in zip(input_fields, values):
            input_field = self.browser.find_element_by_css_selector(selector)
            input_field.send_keys(value)

        button = self.browser.find_element_by_css_selector('button.btn')
        button.click()

        time.sleep(1)
        welcome_text_elt = self.browser.find_element_by_tag_name("h1")
        result = welcome_text_elt.text
        return result

    def test_registration1(self):
        form_url = 'http://suninjuly.github.io/registration1.html'
        registration_result = self.fill_form(form_url)
        self.assertEqual("Поздравляем! Вы успешно зарегистировались!",
                         registration_result)

    def test_registration2(self):
        form_url = 'http://suninjuly.github.io/registration2.html'
        registration_result = self.fill_form(form_url)
        self.assertEqual("Поздравляем! Вы успешно зарегистировались!",
                         registration_result)


if __name__ == '__main__':
    unittest.main()